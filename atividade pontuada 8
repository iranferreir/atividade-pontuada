import os
os.system("cls || clear")

from sqlaçchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import declarative_base, sessionmaker

# Configuração do banco de dados e modelo
Base = declarative_base()

class Funcionario(Base):
    __tablename__ = 'funcionarios'

    id = Column(Integer, primary_key=True, autoincrement=True)
    nome = Column(String, nullable=False)
    idade = Column(Integer, nullable=False)
    cpf = Column(String, unique=True, nullable=False)
    setor = Column(String, nullable=False)
    funcao = Column(String, nullable=False)
    salario = Column(Float, nullable=False)
    telefone = Column(String, nullable=False)

# Configuração do banco de dados SQLite
engine = create_engine('sqlite:///funcionarios.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# Funções CRUD
def salvar_funcionario(funcionario):
    session.add(funcionario)
    session.commit()
    print("Funcionário adicionado com sucesso!")

def listar_todos_funcionarios():
    funcionarios = session.query(Funcionario).all()
    for f in funcionarios:
        print(f"ID: {f.id}, Nome: {f.nome}, Idade: {f.idade}, CPF: {f.cpf}, "
              f"Setor: {f.setor}, Função: {f.funcao}, Salário: {f.salario}, Telefone: {f.telefone}")

def pesquisar_um_funcionario(cpf):
    funcionario = session.query(Funcionario).filter_by(cpf=cpf).first()
    if funcionario:
        print(f"ID: {funcionario.id}, Nome: {funcionario.nome}, Idade: {funcionario.idade}, CPF: {funcionario.cpf}, "
              f"Setor: {funcionario.setor}, Função: {funcionario.funcao}, Salário: {funcionario.salario}, Telefone: {funcionario.telefone}")
        return funcionario
    else:
        print("Funcionário não encontrado.")
        return None

def atualizar_funcionario(cpf, novos_dados):
    funcionario = session.query(Funcionario).filter_by(cpf=cpf).first()
    if funcionario:
        for key, value in novos_dados.items():
            setattr(funcionario, key, value)
        session.commit()
        print("Funcionário atualizado com sucesso!")
    else:
        print("Funcionário não encontrado.")

def excluir_funcionario(cpf):
    funcionario = session.query(Funcionario).filter_by(cpf=cpf).first()
    if funcionario:
        session.delete(funcionario)
        session.commit()
        print("Funcionário excluído com sucesso!")
    else:
        print("Funcionário não encontrado.")

# Menu principal
def menu():
    while True:
        print("""
        === RH System ===
        1 - Adicionar funcionário
        2 - Consultar um funcionário
        3 - Atualizar os dados de um funcionário
        4 - Excluir um funcionário
        5 - Listar todos os funcionários
        0 - Sair do sistema
        """)
        opcao = input("Escolha uma opção: ")
        if opcao == "1":
            nome = input("Nome: ")
            idade = int(input("Idade: "))
            cpf = input("CPF: ")
            setor = input("Setor: ")
            funcao = input("Função: ")
            salario = float(input("Salário: "))
            telefone = input("Telefone: ")
            funcionario = Funcionario(nome=nome, idade=idade, cpf=cpf, setor=setor, funcao=funcao, salario=salario, telefone=telefone)
            salvar_funcionario(funcionario)
        elif opcao == "2":
            cpf = input("Digite o CPF do funcionário: ")
            pesquisar_um_funcionario(cpf)
        elif opcao == "3":
            cpf = input("Digite o CPF do funcionário: ")
            novos_dados = {}
            print("Deixe em branco se não quiser alterar o dado.")
            novos_dados['nome'] = input("Novo nome: ") or None
            novos_dados['idade'] = input("Nova idade: ") or None
            novos_dados['setor'] = input("Novo setor: ") or None
            novos_dados['funcao'] = input("Nova função: ") or None
            novos_dados['salario'] = input("Novo salário: ") or None
            novos_dados['telefone'] = input("Novo telefone: ") or None
            novos_dados = {k: v for k, v in novos_dados.items() if v is not None}
            atualizar_funcionario(cpf, novos_dados)
        elif opcao == "4":
            cpf = input("Digite o CPF do funcionário a ser excluído: ")
            excluir_funcionario(cpf)
        elif opcao == "5":
            listar_todos_funcionarios()
        elif opcao == "0":
            print("Saindo do sistema...")
            break
        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    menu()